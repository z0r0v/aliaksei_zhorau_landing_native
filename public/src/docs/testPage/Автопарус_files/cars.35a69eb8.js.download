/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"client/controller/user-profile/cars": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./assets/js/client/controller/user-profile/cars-controller.js","vendors~client/controller/catalog/article/article~client/controller/catalog/article/article-comment~~17d9e1fa","vendors~client/controller/catalog/article/article~client/controller/catalog/article/article-comment~~3cf69a89","vendors~client/controller/user-profile/cars"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/client/controller/user-profile/cars-controller.js":
/*!*********************************************************************!*\
  !*** ./assets/js/client/controller/user-profile/cars-controller.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.sort */ "./node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

(function (autoparusApp) {
  'use strict';

  autoparusApp.controller('CarsCtrl', ['$scope', '$compile', "ProviderCarsData", function ($scope, $compile, ProviderCarsData) {
    var DEFAULT_OPTION = "<option value=''>Выбрать</option>";
    var DEFAULT_EMPTY_OPTION = "<option value=''></option>";
    var formSelector = null;
    var url = null;

    function init(formSelectorS, editUrl) {
      formSelector = formSelectorS;
      url = editUrl;
      handleForm();
      initAutoSelects();
    }

    function request(url, data, callback) {
      $.post({
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'
        },
        url: url,
        data: data
      }).then(function (response) {
        callback.call($scope, response);
      }, function (response) {
        console.log("error");
      });
    }

    function handleForm() {
      $(formSelector).ready(function () {
        var formEvents = $.data($(this).get(0), 'events');
        var isExistSubmitHandler = !!(formEvents && formEvents.submit);

        if (!isExistSubmitHandler) {
          $(formSelector).off().on("submit", function (e) {
            e.preventDefault();
            sendForm();
            return false;
          });

          if ($(formSelector).attr("redirect-url")) {
            window.location.href = $(formSelector).attr("redirect-url");
          }
        }

        initPrototype();
      });
    }

    function sendForm() {
      var data = $(formSelector).serialize();
      $(formSelector).find("button[type=submit]").prop("disabled", true);
      request(url, data, function (response) {
        var el = $compile(response)($scope);
        $("#form-cars-container").html("").append(el);
        handleForm();
        $(formSelector).find("button[type=submit]").prop("disabled", false);
      });
    }

    function initPrototype() {
      jQuery(document).ready(function () {
        var collectionHolder = $("#cars-container");
        var addCarButton = $("#add-new-car-button");
        collectionHolder.data('index', collectionHolder.find('.car-container').length);
        addCarButton.click(function (e) {
          if (collectionHolder.find('.car-container').length < 5) {
            addCarForm(collectionHolder);
          } else {
            addCarButton.hide();
          }
        });
        $("body").on('click', ".remove-car-button", function (e) {
          $(this).parents(".car-container").remove();

          if ($("#cars-container").find('.car-container').length < 5) {
            $("#add-new-car-button").show();
          }
        });

        if (!collectionHolder.find('.car-container').length) {
          addCarButton.trigger("click");
        }
      });
    }

    function addCarForm(collectionHolder) {
      var prototype = $("#car-prototype-container").html();
      var index = collectionHolder.data('index');
      var newForm = prototype;

      if (collectionHolder.find('.car-container').length === 4) {
        $("#add-new-car-button").hide();
      }

      newForm = newForm.replace(/__index__/g, index);
      collectionHolder.data('index', index + 1);
      collectionHolder.append(newForm);
    }

    function initAutoSelects() {
      $("#form-cars-container").on("change", ".car-form-choice-brand", function () {
        var element = $(this);
        updateBrand(element.val(), element.parents(".car-container"));
      }).on("change", ".car-form-choice-model", function () {
        var element = $(this);
        updateModel(element.val(), element.parents(".car-container"));
      }).on("change", ".car-form-choice-engine-type", function () {
        var element = $(this);
        var container = element.parents(".car-container");
        updateEngineType(element.val(), container.find(".car-form-choice-model").val(), container);
      });
    }

    function updateBrand(brand, container) {
      ProviderCarsData.getModels(brand).then(function (options) {
        var modelsElement = container.find(".car-form-choice-model");
        modelsElement.html("").attr("disabled", false);
        container.find(".car-form-choice-year").html(DEFAULT_EMPTY_OPTION).attr("disabled", true);
        container.find(".car-form-choice-vehicle").html(DEFAULT_OPTION).attr("disabled", true);
        container.find(".car-form-choice-engineType").html(DEFAULT_OPTION).attr("disabled", true);
        container.find(".car-form-choice-capacity").html(DEFAULT_EMPTY_OPTION).attr("disabled", true);
        container.find(".car-form-choice-engine-name").html(DEFAULT_EMPTY_OPTION).attr("disabled", true);
        container.find(".car-form-choice-gear-box-type").html(DEFAULT_OPTION).attr("disabled", true);
        container.find(".car-form-choice-drive-type").html(DEFAULT_OPTION).attr("disabled", true);

        for (var label in options) {
          modelsElement.append($("<option value='" + options[label] + "'>" + label + "</option>"));
        }
      });
    }

    function updateModel(model, container) {
      ProviderCarsData.getEngineTypes(model).then(function (options) {
        setEngineTypes(options, container);
      });
      ProviderCarsData.getCarDataByModel(model).then(function (options) {
        setYears(options["years"], container);
        setTypesByModel(options["vehicleTypes"], container, ".car-form-choice-vehicle");
        setTypesByModel(options["gearBoxTypes"], container, ".car-form-choice-gear-box-type");
        setTypesByModel(options["driveTypes"], container, ".car-form-choice-drive-type");
      });
    }

    function updateEngineType(engineType, model, container) {
      ProviderCarsData.getCarDataByModelAndEngineType(model, engineType).then(function (options) {
        setTypesByModel(options["engineCapacities"], container, ".car-form-choice-capacity");
        setTypesByModel(options["engineNames"], container, ".car-form-choice-engine-name");
      });
    }

    function setYears(options, container) {
      var keysSorted = Object.keys(options).sort(function (a, b) {
        if (a === "") {
          return -1;
        }

        if (b === "") {
          return 1;
        }

        return a < b ? 1 : -1;
      });
      var yearsElement = container.find(".car-form-choice-year");
      yearsElement.html("").attr("disabled", false);
      keysSorted.forEach(function (item) {
        yearsElement.append($("<option value='" + options[item] + "'>" + item + "</option>"));
      });
    }

    function setTypesByModel(options, container, elementSelector) {
      var element = container.find(elementSelector);
      element.html("").attr("disabled", false);

      for (var label in options) {
        element.append($("<option value='" + options[label] + "'>" + label + "</option>"));
      }
    }

    function setEngineTypes(options, container) {
      var engineTypesElement = container.find(".car-form-choice-engine-type");
      engineTypesElement.html("").attr("disabled", false);
      container.find(".car-form-choice-capacity").html(DEFAULT_EMPTY_OPTION).attr("disabled", true);
      container.find(".car-form-choice-engine-name").html(DEFAULT_EMPTY_OPTION).attr("disabled", true);

      for (var label in options) {
        engineTypesElement.append($("<option value='" + options[label] + "'>" + label + "</option>"));
      }
    }

    this.init = init;
  }]);
})(window.autoparusApp);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2NsaWVudC9jb250cm9sbGVyL3VzZXItcHJvZmlsZS9jYXJzLWNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiYXV0b3BhcnVzQXBwIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRjb21waWxlIiwiUHJvdmlkZXJDYXJzRGF0YSIsIkRFRkFVTFRfT1BUSU9OIiwiREVGQVVMVF9FTVBUWV9PUFRJT04iLCJmb3JtU2VsZWN0b3IiLCJ1cmwiLCJpbml0IiwiZm9ybVNlbGVjdG9yUyIsImVkaXRVcmwiLCJoYW5kbGVGb3JtIiwiaW5pdEF1dG9TZWxlY3RzIiwicmVxdWVzdCIsImRhdGEiLCJjYWxsYmFjayIsIiQiLCJwb3N0IiwibWV0aG9kIiwiaGVhZGVycyIsInRoZW4iLCJyZXNwb25zZSIsImNhbGwiLCJjb25zb2xlIiwibG9nIiwicmVhZHkiLCJmb3JtRXZlbnRzIiwiZ2V0IiwiaXNFeGlzdFN1Ym1pdEhhbmRsZXIiLCJzdWJtaXQiLCJvZmYiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInNlbmRGb3JtIiwiYXR0ciIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImluaXRQcm90b3R5cGUiLCJzZXJpYWxpemUiLCJmaW5kIiwicHJvcCIsImVsIiwiaHRtbCIsImFwcGVuZCIsImpRdWVyeSIsImRvY3VtZW50IiwiY29sbGVjdGlvbkhvbGRlciIsImFkZENhckJ1dHRvbiIsImxlbmd0aCIsImNsaWNrIiwiYWRkQ2FyRm9ybSIsImhpZGUiLCJwYXJlbnRzIiwicmVtb3ZlIiwic2hvdyIsInRyaWdnZXIiLCJwcm90b3R5cGUiLCJpbmRleCIsIm5ld0Zvcm0iLCJyZXBsYWNlIiwiZWxlbWVudCIsInVwZGF0ZUJyYW5kIiwidmFsIiwidXBkYXRlTW9kZWwiLCJjb250YWluZXIiLCJ1cGRhdGVFbmdpbmVUeXBlIiwiYnJhbmQiLCJnZXRNb2RlbHMiLCJvcHRpb25zIiwibW9kZWxzRWxlbWVudCIsImxhYmVsIiwibW9kZWwiLCJnZXRFbmdpbmVUeXBlcyIsInNldEVuZ2luZVR5cGVzIiwiZ2V0Q2FyRGF0YUJ5TW9kZWwiLCJzZXRZZWFycyIsInNldFR5cGVzQnlNb2RlbCIsImVuZ2luZVR5cGUiLCJnZXRDYXJEYXRhQnlNb2RlbEFuZEVuZ2luZVR5cGUiLCJrZXlzU29ydGVkIiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJhIiwiYiIsInllYXJzRWxlbWVudCIsImZvckVhY2giLCJpdGVtIiwiZWxlbWVudFNlbGVjdG9yIiwiZW5naW5lVHlwZXNFbGVtZW50Il0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSxRQUFRLG9CQUFvQjtRQUM1QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLGlCQUFpQiw0QkFBNEI7UUFDN0M7UUFDQTtRQUNBLGtCQUFrQiwyQkFBMkI7UUFDN0M7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFD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LEtBQTVDLEdBQW9ELFdBQXJELENBQWhCO0FBQ0g7QUFDSjs7QUFFRCxhQUFTRyxjQUFULENBQXdCTCxPQUF4QixFQUFpQ0osU0FBakMsRUFBNEM7QUFDeEMsVUFBSXlCLGtCQUFrQixHQUFHekIsU0FBUyxDQUFDekIsSUFBVixDQUFlLDhCQUFmLENBQXpCO0FBQ0FrRCx3QkFBa0IsQ0FBQy9DLElBQW5CLENBQXdCLEVBQXhCLEVBQTRCVCxJQUE1QixDQUFpQyxVQUFqQyxFQUE2QyxLQUE3QztBQUNBK0IsZUFBUyxDQUFDekIsSUFBVixDQUFlLDJCQUFmLEVBQTRDRyxJQUE1QyxDQUFpRHZDLG9CQUFqRCxFQUF1RThCLElBQXZFLENBQTRFLFVBQTVFLEVBQXdGLElBQXhGO0FBQ0ErQixlQUFTLENBQUN6QixJQUFWLENBQWUsOEJBQWYsRUFBK0NHLElBQS9DLENBQW9EdkMsb0JBQXBELEVBQTBFOEIsSUFBMUUsQ0FBK0UsVUFBL0UsRUFBMkYsSUFBM0Y7O0FBRUEsV0FBSSxJQUFJcUMsS0FBUixJQUFpQkYsT0FBakIsRUFBeUI7QUFDckJxQiwwQkFBa0IsQ0FBQzlDLE1BQW5CLENBQTBCN0IsQ0FBQyxDQUFDLG9CQUFvQnNELE9BQU8sQ0FBQ0UsS0FBRCxDQUEzQixHQUFxQyxJQUFyQyxHQUE0Q0EsS0FBNUMsR0FBb0QsV0FBckQsQ0FBM0I7QUFDSDtBQUNKOztBQUVELFNBQUtoRSxJQUFMLEdBQVlBLElBQVo7QUFFSCxHQXJObUMsQ0FBcEM7QUFzTkgsQ0F6TkQsRUF5Tkc0QixNQUFNLENBQUNyQyxZQXpOVixFIiwiZmlsZSI6ImNsaWVudC9jb250cm9sbGVyL3VzZXItcHJvZmlsZS9jYXJzLjM1YTY5ZWI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHRcImNsaWVudC9jb250cm9sbGVyL3VzZXItcHJvZmlsZS9jYXJzXCI6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvYnVpbGQvXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFtcIi4vYXNzZXRzL2pzL2NsaWVudC9jb250cm9sbGVyL3VzZXItcHJvZmlsZS9jYXJzLWNvbnRyb2xsZXIuanNcIixcInZlbmRvcnN+Y2xpZW50L2NvbnRyb2xsZXIvY2F0YWxvZy9hcnRpY2xlL2FydGljbGV+Y2xpZW50L2NvbnRyb2xsZXIvY2F0YWxvZy9hcnRpY2xlL2FydGljbGUtY29tbWVudH5+MTdkOWUxZmFcIixcInZlbmRvcnN+Y2xpZW50L2NvbnRyb2xsZXIvY2F0YWxvZy9hcnRpY2xlL2FydGljbGV+Y2xpZW50L2NvbnRyb2xsZXIvY2F0YWxvZy9hcnRpY2xlL2FydGljbGUtY29tbWVudH5+M2NmNjlhODlcIixcInZlbmRvcnN+Y2xpZW50L2NvbnRyb2xsZXIvdXNlci1wcm9maWxlL2NhcnNcIl0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCIoZnVuY3Rpb24oYXV0b3BhcnVzQXBwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYXV0b3BhcnVzQXBwLmNvbnRyb2xsZXIoJ0NhcnNDdHJsJywgWyckc2NvcGUnLCAnJGNvbXBpbGUnLCBcIlByb3ZpZGVyQ2Fyc0RhdGFcIiwgZnVuY3Rpb24oJHNjb3BlLCAkY29tcGlsZSwgUHJvdmlkZXJDYXJzRGF0YSkge1xuICAgICAgICBjb25zdCBERUZBVUxUX09QVElPTiA9IFwiPG9wdGlvbiB2YWx1ZT0nJz7QktGL0LHRgNCw0YLRjDwvb3B0aW9uPlwiO1xuICAgICAgICBjb25zdCBERUZBVUxUX0VNUFRZX09QVElPTiA9IFwiPG9wdGlvbiB2YWx1ZT0nJz48L29wdGlvbj5cIjtcbiAgICAgICAgbGV0IGZvcm1TZWxlY3RvciA9IG51bGw7XG4gICAgICAgIGxldCB1cmwgPSBudWxsO1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoZm9ybVNlbGVjdG9yUywgZWRpdFVybCl7XG4gICAgICAgICAgICBmb3JtU2VsZWN0b3IgPSBmb3JtU2VsZWN0b3JTO1xuICAgICAgICAgICAgdXJsID0gZWRpdFVybDtcblxuICAgICAgICAgICAgaGFuZGxlRm9ybSgpO1xuICAgICAgICAgICAgaW5pdEF1dG9TZWxlY3RzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXF1ZXN0KHVybCwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICQucG9zdCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnfSxcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoJHNjb3BlLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVGb3JtKCl7XG4gICAgICAgICAgICAkKGZvcm1TZWxlY3RvcikucmVhZHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBsZXQgZm9ybUV2ZW50cyA9ICQuZGF0YSgkKHRoaXMpLmdldCgwKSwgJ2V2ZW50cycpO1xuICAgICAgICAgICAgICAgIGxldCBpc0V4aXN0U3VibWl0SGFuZGxlciA9ICEhKGZvcm1FdmVudHMgJiYgZm9ybUV2ZW50cy5zdWJtaXQpO1xuXG4gICAgICAgICAgICAgICAgaWYoIWlzRXhpc3RTdWJtaXRIYW5kbGVyKXtcbiAgICAgICAgICAgICAgICAgICAgJChmb3JtU2VsZWN0b3IpLm9mZigpLm9uKFwic3VibWl0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZEZvcm0oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZigkKGZvcm1TZWxlY3RvcikuYXR0cihcInJlZGlyZWN0LXVybFwiKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICQoZm9ybVNlbGVjdG9yKS5hdHRyKFwicmVkaXJlY3QtdXJsXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5pdFByb3RvdHlwZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZW5kRm9ybSgpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gJChmb3JtU2VsZWN0b3IpLnNlcmlhbGl6ZSgpO1xuXG4gICAgICAgICAgICAkKGZvcm1TZWxlY3RvcikuZmluZChcImJ1dHRvblt0eXBlPXN1Ym1pdF1cIikucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xuXG4gICAgICAgICAgICByZXF1ZXN0KHVybCwgZGF0YSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsID0gJGNvbXBpbGUocmVzcG9uc2UpKCAkc2NvcGUgKTtcblxuICAgICAgICAgICAgICAgICQoXCIjZm9ybS1jYXJzLWNvbnRhaW5lclwiKS5odG1sKFwiXCIpLmFwcGVuZChlbCk7XG4gICAgICAgICAgICAgICAgaGFuZGxlRm9ybSgpO1xuXG4gICAgICAgICAgICAgICAgJChmb3JtU2VsZWN0b3IpLmZpbmQoXCJidXR0b25bdHlwZT1zdWJtaXRdXCIpLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gaW5pdFByb3RvdHlwZSgpIHtcbiAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25Ib2xkZXIgPSAkKFwiI2NhcnMtY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgIGxldCBhZGRDYXJCdXR0b24gPSAkKFwiI2FkZC1uZXctY2FyLWJ1dHRvblwiKTtcblxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25Ib2xkZXIuZGF0YSgnaW5kZXgnLCBjb2xsZWN0aW9uSG9sZGVyLmZpbmQoJy5jYXItY29udGFpbmVyJykubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIGFkZENhckJ1dHRvbi5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbGxlY3Rpb25Ib2xkZXIuZmluZCgnLmNhci1jb250YWluZXInKS5sZW5ndGggPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDYXJGb3JtKGNvbGxlY3Rpb25Ib2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDYXJCdXR0b24uaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKFwiYm9keVwiKS5vbignY2xpY2snLCBcIi5yZW1vdmUtY2FyLWJ1dHRvblwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50cyhcIi5jYXItY29udGFpbmVyXCIpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCQoXCIjY2Fycy1jb250YWluZXJcIikuZmluZCgnLmNhci1jb250YWluZXInKS5sZW5ndGggPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2FkZC1uZXctY2FyLWJ1dHRvblwiKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmKCFjb2xsZWN0aW9uSG9sZGVyLmZpbmQoJy5jYXItY29udGFpbmVyJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENhckJ1dHRvbi50cmlnZ2VyKFwiY2xpY2tcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRDYXJGb3JtKGNvbGxlY3Rpb25Ib2xkZXIpIHtcbiAgICAgICAgICAgIGxldCBwcm90b3R5cGUgPSAkKFwiI2Nhci1wcm90b3R5cGUtY29udGFpbmVyXCIpLmh0bWwoKTtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IGNvbGxlY3Rpb25Ib2xkZXIuZGF0YSgnaW5kZXgnKTtcbiAgICAgICAgICAgIGxldCBuZXdGb3JtID0gcHJvdG90eXBlO1xuXG4gICAgICAgICAgICBpZihjb2xsZWN0aW9uSG9sZGVyLmZpbmQoJy5jYXItY29udGFpbmVyJykubGVuZ3RoID09PSA0KXtcbiAgICAgICAgICAgICAgICAkKFwiI2FkZC1uZXctY2FyLWJ1dHRvblwiKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld0Zvcm0gPSBuZXdGb3JtLnJlcGxhY2UoL19faW5kZXhfXy9nLCBpbmRleCk7XG5cbiAgICAgICAgICAgIGNvbGxlY3Rpb25Ib2xkZXIuZGF0YSgnaW5kZXgnLCBpbmRleCArIDEpO1xuXG4gICAgICAgICAgICBjb2xsZWN0aW9uSG9sZGVyLmFwcGVuZChuZXdGb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRBdXRvU2VsZWN0cygpIHtcbiAgICAgICAgICAgICQoXCIjZm9ybS1jYXJzLWNvbnRhaW5lclwiKVxuICAgICAgICAgICAgICAgIC5vbihcImNoYW5nZVwiLCBcIi5jYXItZm9ybS1jaG9pY2UtYnJhbmRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJyYW5kKGVsZW1lbnQudmFsKCksIGVsZW1lbnQucGFyZW50cyhcIi5jYXItY29udGFpbmVyXCIpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcImNoYW5nZVwiLCBcIi5jYXItZm9ybS1jaG9pY2UtbW9kZWxcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZU1vZGVsKGVsZW1lbnQudmFsKCksIGVsZW1lbnQucGFyZW50cyhcIi5jYXItY29udGFpbmVyXCIpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcImNoYW5nZVwiLCBcIi5jYXItZm9ybS1jaG9pY2UtZW5naW5lLXR5cGVcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gZWxlbWVudC5wYXJlbnRzKFwiLmNhci1jb250YWluZXJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRW5naW5lVHlwZShlbGVtZW50LnZhbCgpLCBjb250YWluZXIuZmluZChcIi5jYXItZm9ybS1jaG9pY2UtbW9kZWxcIikudmFsKCksIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUJyYW5kKGJyYW5kLCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIFByb3ZpZGVyQ2Fyc0RhdGEuZ2V0TW9kZWxzKGJyYW5kKS50aGVuKGZ1bmN0aW9uKG9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIGxldCBtb2RlbHNFbGVtZW50ID0gY29udGFpbmVyLmZpbmQoXCIuY2FyLWZvcm0tY2hvaWNlLW1vZGVsXCIpO1xuICAgICAgICAgICAgICAgIG1vZGVsc0VsZW1lbnQuaHRtbChcIlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoXCIuY2FyLWZvcm0tY2hvaWNlLXllYXJcIikuaHRtbChERUZBVUxUX0VNUFRZX09QVElPTikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5maW5kKFwiLmNhci1mb3JtLWNob2ljZS12ZWhpY2xlXCIpLmh0bWwoREVGQVVMVF9PUFRJT04pLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmluZChcIi5jYXItZm9ybS1jaG9pY2UtZW5naW5lVHlwZVwiKS5odG1sKERFRkFVTFRfT1BUSU9OKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoXCIuY2FyLWZvcm0tY2hvaWNlLWNhcGFjaXR5XCIpLmh0bWwoREVGQVVMVF9FTVBUWV9PUFRJT04pLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmluZChcIi5jYXItZm9ybS1jaG9pY2UtZW5naW5lLW5hbWVcIikuaHRtbChERUZBVUxUX0VNUFRZX09QVElPTikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5maW5kKFwiLmNhci1mb3JtLWNob2ljZS1nZWFyLWJveC10eXBlXCIpLmh0bWwoREVGQVVMVF9PUFRJT04pLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmluZChcIi5jYXItZm9ybS1jaG9pY2UtZHJpdmUtdHlwZVwiKS5odG1sKERFRkFVTFRfT1BUSU9OKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBmb3IobGV0IGxhYmVsIGluIG9wdGlvbnMpe1xuICAgICAgICAgICAgICAgICAgICBtb2RlbHNFbGVtZW50LmFwcGVuZCgkKFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBvcHRpb25zW2xhYmVsXSArIFwiJz5cIiArIGxhYmVsICsgXCI8L29wdGlvbj5cIikpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVNb2RlbChtb2RlbCwgY29udGFpbmVyKSB7XG4gICAgICAgICAgICBQcm92aWRlckNhcnNEYXRhLmdldEVuZ2luZVR5cGVzKG1vZGVsKS50aGVuKGZ1bmN0aW9uKG9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIHNldEVuZ2luZVR5cGVzKG9wdGlvbnMsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgUHJvdmlkZXJDYXJzRGF0YS5nZXRDYXJEYXRhQnlNb2RlbChtb2RlbCkudGhlbihmdW5jdGlvbihvcHRpb25zKXtcbiAgICAgICAgICAgICAgICBzZXRZZWFycyhvcHRpb25zW1wieWVhcnNcIl0sIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgc2V0VHlwZXNCeU1vZGVsKG9wdGlvbnNbXCJ2ZWhpY2xlVHlwZXNcIl0sIGNvbnRhaW5lciwgXCIuY2FyLWZvcm0tY2hvaWNlLXZlaGljbGVcIik7XG4gICAgICAgICAgICAgICAgc2V0VHlwZXNCeU1vZGVsKG9wdGlvbnNbXCJnZWFyQm94VHlwZXNcIl0sIGNvbnRhaW5lciwgXCIuY2FyLWZvcm0tY2hvaWNlLWdlYXItYm94LXR5cGVcIik7XG4gICAgICAgICAgICAgICAgc2V0VHlwZXNCeU1vZGVsKG9wdGlvbnNbXCJkcml2ZVR5cGVzXCJdLCBjb250YWluZXIsIFwiLmNhci1mb3JtLWNob2ljZS1kcml2ZS10eXBlXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVFbmdpbmVUeXBlKGVuZ2luZVR5cGUsIG1vZGVsLCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIFByb3ZpZGVyQ2Fyc0RhdGEuZ2V0Q2FyRGF0YUJ5TW9kZWxBbmRFbmdpbmVUeXBlKG1vZGVsLCBlbmdpbmVUeXBlKS50aGVuKGZ1bmN0aW9uKG9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIHNldFR5cGVzQnlNb2RlbChvcHRpb25zW1wiZW5naW5lQ2FwYWNpdGllc1wiXSwgY29udGFpbmVyLCBcIi5jYXItZm9ybS1jaG9pY2UtY2FwYWNpdHlcIik7XG4gICAgICAgICAgICAgICAgc2V0VHlwZXNCeU1vZGVsKG9wdGlvbnNbXCJlbmdpbmVOYW1lc1wiXSwgY29udGFpbmVyLCBcIi5jYXItZm9ybS1jaG9pY2UtZW5naW5lLW5hbWVcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFllYXJzKG9wdGlvbnMsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgbGV0IGtleXNTb3J0ZWQgPSBPYmplY3Qua2V5cyhvcHRpb25zKS5zb3J0KGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgICAgICAgICAgIGlmKGEgPT09IFwiXCIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoYiA9PT0gXCJcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IDEgOiAtMTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgeWVhcnNFbGVtZW50ID0gY29udGFpbmVyLmZpbmQoXCIuY2FyLWZvcm0tY2hvaWNlLXllYXJcIik7XG4gICAgICAgICAgICB5ZWFyc0VsZW1lbnQuaHRtbChcIlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuXG4gICAgICAgICAgICBrZXlzU29ydGVkLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgICAgeWVhcnNFbGVtZW50LmFwcGVuZCgkKFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBvcHRpb25zW2l0ZW1dICsgXCInPlwiICsgaXRlbSArIFwiPC9vcHRpb24+XCIpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRUeXBlc0J5TW9kZWwob3B0aW9ucywgY29udGFpbmVyLCBlbGVtZW50U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gY29udGFpbmVyLmZpbmQoZWxlbWVudFNlbGVjdG9yKTtcbiAgICAgICAgICAgIGVsZW1lbnQuaHRtbChcIlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuXG4gICAgICAgICAgICBmb3IobGV0IGxhYmVsIGluIG9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKCQoXCI8b3B0aW9uIHZhbHVlPSdcIiArIG9wdGlvbnNbbGFiZWxdICsgXCInPlwiICsgbGFiZWwgKyBcIjwvb3B0aW9uPlwiKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEVuZ2luZVR5cGVzKG9wdGlvbnMsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgbGV0IGVuZ2luZVR5cGVzRWxlbWVudCA9IGNvbnRhaW5lci5maW5kKFwiLmNhci1mb3JtLWNob2ljZS1lbmdpbmUtdHlwZVwiKTtcbiAgICAgICAgICAgIGVuZ2luZVR5cGVzRWxlbWVudC5odG1sKFwiXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBjb250YWluZXIuZmluZChcIi5jYXItZm9ybS1jaG9pY2UtY2FwYWNpdHlcIikuaHRtbChERUZBVUxUX0VNUFRZX09QVElPTikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoXCIuY2FyLWZvcm0tY2hvaWNlLWVuZ2luZS1uYW1lXCIpLmh0bWwoREVGQVVMVF9FTVBUWV9PUFRJT04pLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcblxuICAgICAgICAgICAgZm9yKGxldCBsYWJlbCBpbiBvcHRpb25zKXtcbiAgICAgICAgICAgICAgICBlbmdpbmVUeXBlc0VsZW1lbnQuYXBwZW5kKCQoXCI8b3B0aW9uIHZhbHVlPSdcIiArIG9wdGlvbnNbbGFiZWxdICsgXCInPlwiICsgbGFiZWwgKyBcIjwvb3B0aW9uPlwiKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdCA9IGluaXQ7XG5cbiAgICB9XSk7XG59KSh3aW5kb3cuYXV0b3BhcnVzQXBwKTsiXSwic291cmNlUm9vdCI6IiJ9