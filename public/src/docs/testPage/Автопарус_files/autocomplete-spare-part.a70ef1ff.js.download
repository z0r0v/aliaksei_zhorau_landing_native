/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"client/service/autocomplete-spare-part": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./assets/js/client/service/autocomplete-spare-part.js","vendors~client/controller/catalog/article/article~client/controller/catalog/article/article-comment~~17d9e1fa","vendors~client/controller/catalog/article/article~client/controller/catalog/article/article-comment~~3cf69a89"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/client/service/autocomplete-spare-part.js":
/*!*************************************************************!*\
  !*** ./assets/js/client/service/autocomplete-spare-part.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

(function (autoparusApp) {
  'use strict';

  autoparusApp.service('AutoCompleteResource', function ($q, $http) {
    var API_URL_SPARE_PARTS = '/search/spare-part?text=';
    var API_URL_SPARE_PARTS_IDS = '/search/spare-part/ids?text=';
    var API_URL_BRAND = '/search/brand?text=';
    var API_URL_BRAND_IDS = '/search/brand/ids?text=';
    var API_URL_MODEL = '/search/model/';
    var API_URL_MODEL_IDS = '/search/model/ids';
    var API_URL_YEAR = '/search/year/__brand__/__model__/';
    var API_URL_ENGINE_TYPE = '/search/engine-type/__brand__/__model__/';
    var API_URL_ENGINE_CAPACITY = '/search/engine-capacity/__brand__/__model__/__engine_type__';
    var API_URL_VEHICLE_TYPE = '/search/vehicle-type/__brand__/__model__/';
    var API_URL_OBD2_TYPE = '/search/obd2-type?text=';
    var API_URL_OBD2_CODE = '/search/obd2-code/';
    var API_URL_PHONE_WORK = '/search/phone/work?text=';
    var API_URL_PHONE_BRAND = '/search/phone/brand?text=';
    var API_URL_PHONE_MODEL = '/search/phone/model/';

    this.searchSpareParts = function (term) {
      return search(API_URL_SPARE_PARTS + term);
    };

    this.searchSparePartsIds = function (term) {
      return search(API_URL_SPARE_PARTS_IDS + term);
    };

    this.searchBrands = function (term) {
      return search(API_URL_BRAND + term);
    };

    this.searchBrandsIds = function (term) {
      return search(API_URL_BRAND_IDS + term);
    };

    this.searchModels = function (term, parameters) {
      var url = API_URL_MODEL + parameters.brand + "?text=" + term;

      if (parameters.hasOwnProperty("by-name")) {
        url += "&by-name";
      }

      return search(url);
    };

    this.searchModelsIds = function (term, parameters) {
      var url = API_URL_MODEL_IDS + parameters.brand + "?text=" + term;
      return search(url);
    };

    this.searchYears = function (term, parameters) {
      var url = API_URL_YEAR.replace("__brand__", parameters.brand).replace("__model__", parameters.model) + "?text=" + term;

      if (parameters.hasOwnProperty("by-name")) {
        url += "&by-name";
      }

      return search(url);
    };

    this.searchEngineTypes = function (term, parameters) {
      return search(API_URL_ENGINE_TYPE.replace("__brand__", parameters.brand).replace("__model__", parameters.model) + "?text=" + term);
    };

    this.searchEngineCapacities = function (term, parameters) {
      return search(API_URL_ENGINE_CAPACITY.replace("__brand__", parameters.brand).replace("__model__", parameters.model).replace("__engine_type__", parameters.engineType) + "?text=" + term);
    };

    this.searchVehicleTypes = function (term, parameters) {
      return search(API_URL_VEHICLE_TYPE.replace("__brand__", parameters.brand).replace("__model__", parameters.model) + "?text=" + term);
    };

    this.searchPhoneWork = function (term) {
      return search(API_URL_PHONE_WORK + term);
    };

    this.searchPhoneBrands = function (term) {
      return search(API_URL_PHONE_BRAND + term);
    };

    this.searchPhoneModels = function (term, parameters) {
      return search(API_URL_PHONE_MODEL + parameters.brand + "?text=" + term);
    };

    this.searchOBD2Types = function (term) {
      return search(API_URL_OBD2_TYPE + term);
    };

    this.searchOBD2Code = function (term, parameters) {
      var url = API_URL_OBD2_CODE + parameters.type + "?text=" + term;

      if (parameters.hasOwnProperty("by-designation")) {
        url += "&by-designation";
      }

      return search(url);
    };

    function search(url) {
      var deferred = $q.defer();
      $http.get(url).then(function (suggestions) {
        deferred.resolve(suggestions.data);
      }, function () {
        deferred.reject(arguments);
      });
      return deferred.promise;
    }
  });
})(window.autoparusApp);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,