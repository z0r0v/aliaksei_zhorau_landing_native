/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"client/controller/user-profile/provider-cars-data": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./assets/js/client/controller/user-profile/provider-cars-data.js","vendors~client/controller/catalog/article/article~client/controller/catalog/article/article-comment~~17d9e1fa","vendors~client/controller/catalog/article/article~client/controller/catalog/article/article-comment~~3cf69a89"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/client/controller/user-profile/provider-cars-data.js":
/*!************************************************************************!*\
  !*** ./assets/js/client/controller/user-profile/provider-cars-data.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

(function (autoparusApp) {
  'use strict';

  autoparusApp.service('ProviderCarsData', function ($q, $http) {
    var API_URL_MODELS = '/user-office/get-models-by-brand?brand=[br]';
    var API_URL_YEARS = '/user-office/get-years-by-model?model=[m]';
    var API_URL_VEHICLES = '/user-office/get-vehicles-by-model?model=[m]';
    var API_URL_ENGINE_TYPES = '/user-office/get-engine-types-by-model?model=[m]';
    var API_URL_CAPACITIES = '/user-office/get-capacities-by-model-engine-type?model=[m]&engine_type=[e_t]';
    var API_URL_CAR_DATA_BY_MODEL = '/user-office/get-car-data-by-model?model=[m]';
    var API_URL_CAR_DATA_BY_MODEL_ENGINE_TYPE = '/user-office/get-car-data-by-model-engine-type?model=[m]&engine_type=[e_t]';
    var API_URL_CAR_DATA_BY_MODEL_ENGINE_TYPE_CAPACITY = '/user-office/get-car-data-by-model-engine-type-capacity?model=[m]&engine_type=[e_t]&capacity=[cap]';

    this.getModels = function (brand) {
      return search(API_URL_MODELS.replace("[br]", brand));
    };

    this.getYears = function (model) {
      return search(API_URL_YEARS.replace("[m]", model));
    };

    this.getVehicles = function (model) {
      return search(API_URL_VEHICLES.replace("[m]", model));
    };

    this.getEngineTypes = function (model) {
      return search(API_URL_ENGINE_TYPES.replace("[m]", model));
    };

    this.getCapacities = function (model, engineType) {
      return search(API_URL_CAPACITIES.replace("[m]", model).replace("[e_t]", engineType));
    };

    this.getCarDataByModel = function (model) {
      return search(API_URL_CAR_DATA_BY_MODEL.replace("[m]", model));
    };

    this.getCarDataByModelAndEngineType = function (model, engineType) {
      return search(API_URL_CAR_DATA_BY_MODEL_ENGINE_TYPE.replace("[m]", model).replace("[e_t]", engineType));
    };

    this.getCarDataByModelAndEngineTypeAndCapacity = function (model, engineType, capacityVal) {
      return search(API_URL_CAR_DATA_BY_MODEL_ENGINE_TYPE_CAPACITY.replace("[m]", model).replace("[e_t]", engineType).replace("[cap]", capacityVal));
    };

    function search(url) {
      var deferred = $q.defer();
      $http.get(url).then(function (suggestions) {
        deferred.resolve(suggestions.data);
      }, function () {
        deferred.reject(arguments);
      });
      return deferred.promise;
    }
  });
})(window.autoparusApp);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,